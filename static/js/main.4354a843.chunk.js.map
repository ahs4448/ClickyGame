{"version":3,"sources":["logo.svg","components/board/ScoreNav/ScoreNav.js","components/board/board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScoreNav","shuffleArray","arr","map","a","Math","random","sort","b","alert","ClickyApp","state","totalScore","whiteScore","blackScore","blueScore","aquaScore","thunderScore","plasmaScore","chaosScore","magnetScore","louieScore","pinkScore","greenScore","mermScore","initialChars","name","img","handleRearrange","e","target","id","setState","className","src","this","bomby","alt","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4354a843.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction ScoreNav (){\n  return(\n    <nav className=\"navbar navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"#\">Bomberman Clicky Game </a> <h1>Score:0 | Top Score:0</h1>\n  </nav>\n  )\n}\n\nexport default ScoreNav","import React, { Component } from 'react';\nimport './style.css';\nimport ScoreNav from './ScoreNav/ScoreNav'\n\nconst shuffleArray = arr => (\n  arr\n    .map(a => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map(a => a[1])\n);\n\nalert(\"Click on an image to earn points, but don't click on any more than once!\")\n\nconst bannerImg = './images/Bomberman_Logo.png';\nconst reactLogo = './images/react-1-logo.png'\nclass ClickyApp extends Component {\n  state = {\n    totalScore:0,\n    whiteScore: 0,\n    blackScore: 0,\n    blueScore: 0,\n    aquaScore: 0,\n    thunderScore: 0,\n    plasmaScore: 0,\n    chaosScore: 0,\n    magnetScore: 0,\n    louieScore: 0,\n    pinkScore: 0,\n    greenScore: 0,\n    mermScore: 0,\n\n    initialChars: [\n      {\n        name: 'Black Bomber',\n        img: './images/BlackBomber.jpg'\n      },\n      {\n        name: 'Thunder Bomber',\n        img: './images/ThunderBomber.png'\n      },\n      {\n        name: 'Aqua Bomber',\n        img: './images/Aqua.jpg'\n      },\n      {\n        name: 'Blue Bomber',\n        img: './images/KidBlue.png'\n      },\n      {\n        name: 'Chaos Bomber',\n        img: './images/Chaos_bomber.png'\n      },\n      {\n        name: 'Green Bomber',\n        img: './images/Green_Bomber.jpg'\n      },\n      {\n        name: 'White Bomber',\n        img: './images/icon.png'\n      },\n      {\n        name: 'Magnet Bomber',\n        img: './images/MagnetBomber.png'\n      },\n      {\n        name: 'Plasma Bomber',\n        img: './images/PlasmaBomber.png'\n      },\n      {\n        name: 'mermaid Bomber',\n        img: './images/Mermaid_Bomber.jpg'\n      },\n      {\n        name: 'Louie',\n        img: './images/Louie.png'\n      },\n      {\n        name: 'Pretty Bomber',\n        img: './images/Pink.png'\n      },\n    ]\n  }\n\n  handleRearrange = (e) => {\n    const initialChars = shuffleArray(this.state.initialChars)\n\n    if (e.target.id === \"White Bomber\") {\n      this.state.whiteScore += 1\n    }\n\n    if (e.target.id === \"Black Bomber\") {\n      this.state.blackScore += 1\n    }\n\n    if (e.target.id === \"Blue Bomber\") {\n      this.state.blueScore += 1\n    }\n\n    if (e.target.id === \"Aqua Bomber\") {\n      this.state.aquaScore += 1\n    }\n\n    if (e.target.id === \"Thunder Bomber\") {\n      this.state.thunderScore += 1\n    }\n\n    if (e.target.id === \"Chaos Bomber\") {\n      this.state.chaosScore += 1\n    }\n\n    if (e.target.id === \"Plasma Bomber\") {\n      this.state.plasmaScore += 1\n    }\n\n    if (e.target.id === \"Magnet Bomber\") {\n      this.state.magnetScore += 1\n    }\n    if (e.target.id === \"Louie\") {\n      this.state.louieScore += 1\n    }\n    if (e.target.id === \"Pretty Bomber\") {\n      this.state.pinkScore += 1\n    }\n    if (e.target.id === \"Green Bomber\") {\n      this.state.greenScore += 1\n    }\n    if (e.target.id === \"mermaid Bomber\") {\n      this.state.mermScore += 1\n    }\n    ////handle losing game logic\n\n    if (this.state.whiteScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.blackScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.blueScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.aquaScore === 2) {\n      alert('ya lose')\n    }\n    if (this.state.plasmaScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.chaosScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.magnetScore === 2) {\n      alert('ya lose')\n    }\n\n    if (this.state.thunderScore === 2) {\n      alert('ya lose')\n    }\n    if (this.state.greenScore === 2) {\n      alert('ya lose')\n    }\n    if (this.state.mermScore === 2) {\n      alert('ya lose')\n    }\n    if (this.state.pinkScore === 2) {\n      alert('ya lose')\n    }\n    if (this.state.louieScore === 2) {\n      alert('ya lose')\n    }else{\n      this.state.totalScore++\n    }\n\n  \n\n    this.setState({\n      initialChars,\n    })\n\n  }\n\n  render() {\n    return (\n    \n      <div className =\"container\">\n       \n        \n        <nav>   <img src={bannerImg} id=\"banner\"/> <p> Score:{this.state.totalScore}</p> </nav> \n        <div className='row'>\n          \n          {this.state.initialChars.map(bomby => {\n            return (\n\n              <div className=\"col-md-3\">\n                \n                <div className=\"somethin\"></div>\n                <img src={bomby.img} alt=\"\" className=\"img-thumbnail first\" id={bomby.name} onClick={this.handleRearrange} />\n              </div>\n            )\n\n          })}\n         \n        </div>\n        <nav> <img src={bannerImg}  id=\"banner\"/> <img src={reactLogo} id=\"logo\"/> </nav> \n      </div>\n      \n    )\n  }\n\n}\n\nexport default ClickyApp\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ClickyApp from './components/board/board'\nclass App extends Component {\n  render() {\n    return (\n    \n      <ClickyApp/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}